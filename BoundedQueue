package javafoundations;

import javafoundations.CircularArrayQueue;
/**
 * implement a bounded queue ADT
 * @author Rachel Suarez and Isabella Cruz
 * @version 4/1/22
 */
public class BoundedQueue<T> extends CircularArrayQueue<T>
{
    private int c; //max capacity


    
    /**
     * constructor for object
     * 
     * @param c the capacity of the bounded queue
    */
    public BoundedQueue(int c){
        super();
        this.c = c;
    }
    
    /**
     * Returns true if bounded queue is at capacity, false otherwise
     * 
     * @return true if the queue is at capacity, false otherwise.
     */
    
    public boolean isFull(){
        return (this.size() == c);
    }
    
    /**
     * Adds the specified element to the rear of the queue
     * 
     * @param element The element to be enqueued into the queue
     */
    public void enqueue(T element) 
    {
        if(isFull()){
            System.out.println("Cannot enqueue");
        }
        else{
            super.enqueue(element);
        }
    }
    /**
     * main method for testing
     */
    public static void main(String[] args){
        System.out.println("Testing constructor");
        BoundedQueue q = new BoundedQueue(2);
        System.out.println(q);
        
        System.out.println("Testing enqueue()");
        q.enqueue("a");
        System.out.println(q);
        q.enqueue("b");
        System.out.println(q);
        
        System.out.println("Testing isFull()");
        System.out.println("Expecting true Got:" + q.isFull());
    }
}
